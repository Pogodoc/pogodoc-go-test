// This file was auto-generated by Fern from our API Definition.

package documents

import (
	context "context"
	http "net/http"

	pogodocgoclient "github.com/Pogodoc/pogodoc-go-test/client"
	core "github.com/Pogodoc/pogodoc-go-test/client/core"
	internal "github.com/Pogodoc/pogodoc-go-test/client/internal"
	option "github.com/Pogodoc/pogodoc-go-test/client/option"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
func (c *Client) InitializeRenderJob(
	ctx context.Context,
	request *pogodocgoclient.InitializeRenderJobRequest,
	opts ...option.RequestOption,
) (*pogodocgoclient.InitializeRenderJobResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.pogodoc.com/v1",
	)
	endpointURL := baseURL + "/documents/init"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *pogodocgoclient.InitializeRenderJobResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
func (c *Client) StartRenderJob(
	ctx context.Context,
	jobId string,
	request *pogodocgoclient.StartRenderJobRequest,
	opts ...option.RequestOption,
) (*pogodocgoclient.StartRenderJobResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.pogodoc.com/v1",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/documents/%v/render",
		jobId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *pogodocgoclient.StartRenderJobResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
func (c *Client) StartImmediateRender(
	ctx context.Context,
	request *pogodocgoclient.StartImmediateRenderRequest,
	opts ...option.RequestOption,
) (*pogodocgoclient.StartImmediateRenderResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.pogodoc.com/v1",
	)
	endpointURL := baseURL + "/documents/immediate-render"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *pogodocgoclient.StartImmediateRenderResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
func (c *Client) GetJobStatus(
	ctx context.Context,
	// ID of the render job
	jobId string,
	opts ...option.RequestOption,
) (*pogodocgoclient.GetJobStatusResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.pogodoc.com/v1",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/jobs/%v",
		jobId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *pogodocgoclient.GetJobStatusResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
