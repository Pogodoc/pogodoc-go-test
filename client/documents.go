// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Pogodoc/pogodoc-go-test/client/internal"
)

type InitializeRenderJobRequest struct {
	// Sample data for the template
	Data map[string]interface{} `json:"data,omitempty" url:"-"`
	// Type of template to be rendered
	Type InitializeRenderJobRequestType `json:"type" url:"-"`
	// Type of output to be rendered
	Target InitializeRenderJobRequestTarget `json:"target" url:"-"`
	// ID of the template to be used
	TemplateId *string `json:"templateId,omitempty" url:"-"`
	// Format options for the rendered document
	FormatOpts *InitializeRenderJobRequestFormatOpts `json:"formatOpts,omitempty" url:"-"`
}

type StartImmediateRenderRequest struct {
	// Sample data for the template
	StartImmediateRenderRequestData map[string]interface{} `json:"data,omitempty" url:"-"`
	// Type of template to be rendered
	Type StartImmediateRenderRequestType `json:"type" url:"-"`
	// Type of output to be rendered
	Target StartImmediateRenderRequestTarget `json:"target" url:"-"`
	// ID of the template to be used
	TemplateId *string `json:"templateId,omitempty" url:"-"`
	// Format options for the rendered document
	FormatOpts *StartImmediateRenderRequestFormatOpts `json:"formatOpts,omitempty" url:"-"`
	// index.html or ejs file of the template as a string
	Template *string `json:"template,omitempty" url:"-"`
}

type StartRenderJobRequest struct {
	// Whether to wait for the render job to complete, if false, the job will be returned immediately
	ShouldWaitForRenderCompletion *bool   `json:"shouldWaitForRenderCompletion,omitempty" url:"-"`
	UploadPresignedS3Url          *string `json:"uploadPresignedS3Url,omitempty" url:"-"`
}

type GetJobStatusResponse struct {
	// Type of template to be rendered
	Type GetJobStatusResponseType `json:"type" url:"type"`
	// ID of the render job
	JobId string `json:"jobId" url:"jobId"`
	// Type of output to be rendered
	Target  GetJobStatusResponseTarget  `json:"target" url:"target"`
	Output  *GetJobStatusResponseOutput `json:"output,omitempty" url:"output,omitempty"`
	Success *bool                       `json:"success,omitempty" url:"success,omitempty"`
	Status  *string                     `json:"status,omitempty" url:"status,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetJobStatusResponse) GetType() GetJobStatusResponseType {
	if g == nil {
		return ""
	}
	return g.Type
}

func (g *GetJobStatusResponse) GetJobId() string {
	if g == nil {
		return ""
	}
	return g.JobId
}

func (g *GetJobStatusResponse) GetTarget() GetJobStatusResponseTarget {
	if g == nil {
		return ""
	}
	return g.Target
}

func (g *GetJobStatusResponse) GetOutput() *GetJobStatusResponseOutput {
	if g == nil {
		return nil
	}
	return g.Output
}

func (g *GetJobStatusResponse) GetSuccess() *bool {
	if g == nil {
		return nil
	}
	return g.Success
}

func (g *GetJobStatusResponse) GetStatus() *string {
	if g == nil {
		return nil
	}
	return g.Status
}

func (g *GetJobStatusResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetJobStatusResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetJobStatusResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetJobStatusResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetJobStatusResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetJobStatusResponseOutput struct {
	Data     *GetJobStatusResponseOutputData     `json:"data,omitempty" url:"data,omitempty"`
	Metadata *GetJobStatusResponseOutputMetadata `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetJobStatusResponseOutput) GetData() *GetJobStatusResponseOutputData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetJobStatusResponseOutput) GetMetadata() *GetJobStatusResponseOutputMetadata {
	if g == nil {
		return nil
	}
	return g.Metadata
}

func (g *GetJobStatusResponseOutput) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetJobStatusResponseOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler GetJobStatusResponseOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetJobStatusResponseOutput(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetJobStatusResponseOutput) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetJobStatusResponseOutputData struct {
	// URL of the rendered output
	Url string `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetJobStatusResponseOutputData) GetUrl() string {
	if g == nil {
		return ""
	}
	return g.Url
}

func (g *GetJobStatusResponseOutputData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetJobStatusResponseOutputData) UnmarshalJSON(data []byte) error {
	type unmarshaler GetJobStatusResponseOutputData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetJobStatusResponseOutputData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetJobStatusResponseOutputData) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetJobStatusResponseOutputMetadata struct {
	// Time taken to render the output
	RenderTime float64 `json:"renderTime" url:"renderTime"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetJobStatusResponseOutputMetadata) GetRenderTime() float64 {
	if g == nil {
		return 0
	}
	return g.RenderTime
}

func (g *GetJobStatusResponseOutputMetadata) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetJobStatusResponseOutputMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler GetJobStatusResponseOutputMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetJobStatusResponseOutputMetadata(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetJobStatusResponseOutputMetadata) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Type of output to be rendered
type GetJobStatusResponseTarget string

const (
	GetJobStatusResponseTargetPdf  GetJobStatusResponseTarget = "pdf"
	GetJobStatusResponseTargetHtml GetJobStatusResponseTarget = "html"
	GetJobStatusResponseTargetDocx GetJobStatusResponseTarget = "docx"
	GetJobStatusResponseTargetXlsx GetJobStatusResponseTarget = "xlsx"
	GetJobStatusResponseTargetPptx GetJobStatusResponseTarget = "pptx"
	GetJobStatusResponseTargetPng  GetJobStatusResponseTarget = "png"
	GetJobStatusResponseTargetJpg  GetJobStatusResponseTarget = "jpg"
)

func NewGetJobStatusResponseTargetFromString(s string) (GetJobStatusResponseTarget, error) {
	switch s {
	case "pdf":
		return GetJobStatusResponseTargetPdf, nil
	case "html":
		return GetJobStatusResponseTargetHtml, nil
	case "docx":
		return GetJobStatusResponseTargetDocx, nil
	case "xlsx":
		return GetJobStatusResponseTargetXlsx, nil
	case "pptx":
		return GetJobStatusResponseTargetPptx, nil
	case "png":
		return GetJobStatusResponseTargetPng, nil
	case "jpg":
		return GetJobStatusResponseTargetJpg, nil
	}
	var t GetJobStatusResponseTarget
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GetJobStatusResponseTarget) Ptr() *GetJobStatusResponseTarget {
	return &g
}

// Type of template to be rendered
type GetJobStatusResponseType string

const (
	GetJobStatusResponseTypeDocx  GetJobStatusResponseType = "docx"
	GetJobStatusResponseTypeXlsx  GetJobStatusResponseType = "xlsx"
	GetJobStatusResponseTypePptx  GetJobStatusResponseType = "pptx"
	GetJobStatusResponseTypeEjs   GetJobStatusResponseType = "ejs"
	GetJobStatusResponseTypeHtml  GetJobStatusResponseType = "html"
	GetJobStatusResponseTypeLatex GetJobStatusResponseType = "latex"
	GetJobStatusResponseTypeReact GetJobStatusResponseType = "react"
)

func NewGetJobStatusResponseTypeFromString(s string) (GetJobStatusResponseType, error) {
	switch s {
	case "docx":
		return GetJobStatusResponseTypeDocx, nil
	case "xlsx":
		return GetJobStatusResponseTypeXlsx, nil
	case "pptx":
		return GetJobStatusResponseTypePptx, nil
	case "ejs":
		return GetJobStatusResponseTypeEjs, nil
	case "html":
		return GetJobStatusResponseTypeHtml, nil
	case "latex":
		return GetJobStatusResponseTypeLatex, nil
	case "react":
		return GetJobStatusResponseTypeReact, nil
	}
	var t GetJobStatusResponseType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GetJobStatusResponseType) Ptr() *GetJobStatusResponseType {
	return &g
}

// Format options for the rendered document
type InitializeRenderJobRequestFormatOpts struct {
	FromPage *float64                                    `json:"fromPage,omitempty" url:"fromPage,omitempty"`
	ToPage   *float64                                    `json:"toPage,omitempty" url:"toPage,omitempty"`
	Format   *InitializeRenderJobRequestFormatOptsFormat `json:"format,omitempty" url:"format,omitempty"`
	// Selector to wait for to know when the page is loaded and can be saved as pdf, png, etc.
	WaitForSelector *string `json:"waitForSelector,omitempty" url:"waitForSelector,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InitializeRenderJobRequestFormatOpts) GetFromPage() *float64 {
	if i == nil {
		return nil
	}
	return i.FromPage
}

func (i *InitializeRenderJobRequestFormatOpts) GetToPage() *float64 {
	if i == nil {
		return nil
	}
	return i.ToPage
}

func (i *InitializeRenderJobRequestFormatOpts) GetFormat() *InitializeRenderJobRequestFormatOptsFormat {
	if i == nil {
		return nil
	}
	return i.Format
}

func (i *InitializeRenderJobRequestFormatOpts) GetWaitForSelector() *string {
	if i == nil {
		return nil
	}
	return i.WaitForSelector
}

func (i *InitializeRenderJobRequestFormatOpts) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InitializeRenderJobRequestFormatOpts) UnmarshalJSON(data []byte) error {
	type unmarshaler InitializeRenderJobRequestFormatOpts
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InitializeRenderJobRequestFormatOpts(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitializeRenderJobRequestFormatOpts) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type InitializeRenderJobRequestFormatOptsFormat string

const (
	InitializeRenderJobRequestFormatOptsFormatLetter  InitializeRenderJobRequestFormatOptsFormat = "letter"
	InitializeRenderJobRequestFormatOptsFormatLegal   InitializeRenderJobRequestFormatOptsFormat = "legal"
	InitializeRenderJobRequestFormatOptsFormatTabloid InitializeRenderJobRequestFormatOptsFormat = "tabloid"
	InitializeRenderJobRequestFormatOptsFormatLedger  InitializeRenderJobRequestFormatOptsFormat = "ledger"
	InitializeRenderJobRequestFormatOptsFormatA0      InitializeRenderJobRequestFormatOptsFormat = "a0"
	InitializeRenderJobRequestFormatOptsFormatA1      InitializeRenderJobRequestFormatOptsFormat = "a1"
	InitializeRenderJobRequestFormatOptsFormatA2      InitializeRenderJobRequestFormatOptsFormat = "a2"
	InitializeRenderJobRequestFormatOptsFormatA3      InitializeRenderJobRequestFormatOptsFormat = "a3"
	InitializeRenderJobRequestFormatOptsFormatA4      InitializeRenderJobRequestFormatOptsFormat = "a4"
	InitializeRenderJobRequestFormatOptsFormatA5      InitializeRenderJobRequestFormatOptsFormat = "a5"
	InitializeRenderJobRequestFormatOptsFormatA6      InitializeRenderJobRequestFormatOptsFormat = "a6"
)

func NewInitializeRenderJobRequestFormatOptsFormatFromString(s string) (InitializeRenderJobRequestFormatOptsFormat, error) {
	switch s {
	case "letter":
		return InitializeRenderJobRequestFormatOptsFormatLetter, nil
	case "legal":
		return InitializeRenderJobRequestFormatOptsFormatLegal, nil
	case "tabloid":
		return InitializeRenderJobRequestFormatOptsFormatTabloid, nil
	case "ledger":
		return InitializeRenderJobRequestFormatOptsFormatLedger, nil
	case "a0":
		return InitializeRenderJobRequestFormatOptsFormatA0, nil
	case "a1":
		return InitializeRenderJobRequestFormatOptsFormatA1, nil
	case "a2":
		return InitializeRenderJobRequestFormatOptsFormatA2, nil
	case "a3":
		return InitializeRenderJobRequestFormatOptsFormatA3, nil
	case "a4":
		return InitializeRenderJobRequestFormatOptsFormatA4, nil
	case "a5":
		return InitializeRenderJobRequestFormatOptsFormatA5, nil
	case "a6":
		return InitializeRenderJobRequestFormatOptsFormatA6, nil
	}
	var t InitializeRenderJobRequestFormatOptsFormat
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InitializeRenderJobRequestFormatOptsFormat) Ptr() *InitializeRenderJobRequestFormatOptsFormat {
	return &i
}

// Type of output to be rendered
type InitializeRenderJobRequestTarget string

const (
	InitializeRenderJobRequestTargetPdf  InitializeRenderJobRequestTarget = "pdf"
	InitializeRenderJobRequestTargetHtml InitializeRenderJobRequestTarget = "html"
	InitializeRenderJobRequestTargetDocx InitializeRenderJobRequestTarget = "docx"
	InitializeRenderJobRequestTargetXlsx InitializeRenderJobRequestTarget = "xlsx"
	InitializeRenderJobRequestTargetPptx InitializeRenderJobRequestTarget = "pptx"
	InitializeRenderJobRequestTargetPng  InitializeRenderJobRequestTarget = "png"
	InitializeRenderJobRequestTargetJpg  InitializeRenderJobRequestTarget = "jpg"
)

func NewInitializeRenderJobRequestTargetFromString(s string) (InitializeRenderJobRequestTarget, error) {
	switch s {
	case "pdf":
		return InitializeRenderJobRequestTargetPdf, nil
	case "html":
		return InitializeRenderJobRequestTargetHtml, nil
	case "docx":
		return InitializeRenderJobRequestTargetDocx, nil
	case "xlsx":
		return InitializeRenderJobRequestTargetXlsx, nil
	case "pptx":
		return InitializeRenderJobRequestTargetPptx, nil
	case "png":
		return InitializeRenderJobRequestTargetPng, nil
	case "jpg":
		return InitializeRenderJobRequestTargetJpg, nil
	}
	var t InitializeRenderJobRequestTarget
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InitializeRenderJobRequestTarget) Ptr() *InitializeRenderJobRequestTarget {
	return &i
}

// Type of template to be rendered
type InitializeRenderJobRequestType string

const (
	InitializeRenderJobRequestTypeDocx  InitializeRenderJobRequestType = "docx"
	InitializeRenderJobRequestTypeXlsx  InitializeRenderJobRequestType = "xlsx"
	InitializeRenderJobRequestTypePptx  InitializeRenderJobRequestType = "pptx"
	InitializeRenderJobRequestTypeEjs   InitializeRenderJobRequestType = "ejs"
	InitializeRenderJobRequestTypeHtml  InitializeRenderJobRequestType = "html"
	InitializeRenderJobRequestTypeLatex InitializeRenderJobRequestType = "latex"
	InitializeRenderJobRequestTypeReact InitializeRenderJobRequestType = "react"
)

func NewInitializeRenderJobRequestTypeFromString(s string) (InitializeRenderJobRequestType, error) {
	switch s {
	case "docx":
		return InitializeRenderJobRequestTypeDocx, nil
	case "xlsx":
		return InitializeRenderJobRequestTypeXlsx, nil
	case "pptx":
		return InitializeRenderJobRequestTypePptx, nil
	case "ejs":
		return InitializeRenderJobRequestTypeEjs, nil
	case "html":
		return InitializeRenderJobRequestTypeHtml, nil
	case "latex":
		return InitializeRenderJobRequestTypeLatex, nil
	case "react":
		return InitializeRenderJobRequestTypeReact, nil
	}
	var t InitializeRenderJobRequestType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InitializeRenderJobRequestType) Ptr() *InitializeRenderJobRequestType {
	return &i
}

type InitializeRenderJobResponse struct {
	// ID of the render job
	JobId string `json:"jobId" url:"jobId"`
	// Type of output to be rendered
	Target InitializeRenderJobResponseTarget `json:"target" url:"target"`
	// Presigned URL to upload the data for the render job to S3
	PresignedDataUploadUrl *string `json:"presignedDataUploadUrl,omitempty" url:"presignedDataUploadUrl,omitempty"`
	// Presigned URL to upload the template for the render job to S3. Only works with EJS templates
	PresignedTemplateUploadUrl *string `json:"presignedTemplateUploadUrl,omitempty" url:"presignedTemplateUploadUrl,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InitializeRenderJobResponse) GetJobId() string {
	if i == nil {
		return ""
	}
	return i.JobId
}

func (i *InitializeRenderJobResponse) GetTarget() InitializeRenderJobResponseTarget {
	if i == nil {
		return ""
	}
	return i.Target
}

func (i *InitializeRenderJobResponse) GetPresignedDataUploadUrl() *string {
	if i == nil {
		return nil
	}
	return i.PresignedDataUploadUrl
}

func (i *InitializeRenderJobResponse) GetPresignedTemplateUploadUrl() *string {
	if i == nil {
		return nil
	}
	return i.PresignedTemplateUploadUrl
}

func (i *InitializeRenderJobResponse) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InitializeRenderJobResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler InitializeRenderJobResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InitializeRenderJobResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitializeRenderJobResponse) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Type of output to be rendered
type InitializeRenderJobResponseTarget string

const (
	InitializeRenderJobResponseTargetPdf  InitializeRenderJobResponseTarget = "pdf"
	InitializeRenderJobResponseTargetHtml InitializeRenderJobResponseTarget = "html"
	InitializeRenderJobResponseTargetDocx InitializeRenderJobResponseTarget = "docx"
	InitializeRenderJobResponseTargetXlsx InitializeRenderJobResponseTarget = "xlsx"
	InitializeRenderJobResponseTargetPptx InitializeRenderJobResponseTarget = "pptx"
	InitializeRenderJobResponseTargetPng  InitializeRenderJobResponseTarget = "png"
	InitializeRenderJobResponseTargetJpg  InitializeRenderJobResponseTarget = "jpg"
)

func NewInitializeRenderJobResponseTargetFromString(s string) (InitializeRenderJobResponseTarget, error) {
	switch s {
	case "pdf":
		return InitializeRenderJobResponseTargetPdf, nil
	case "html":
		return InitializeRenderJobResponseTargetHtml, nil
	case "docx":
		return InitializeRenderJobResponseTargetDocx, nil
	case "xlsx":
		return InitializeRenderJobResponseTargetXlsx, nil
	case "pptx":
		return InitializeRenderJobResponseTargetPptx, nil
	case "png":
		return InitializeRenderJobResponseTargetPng, nil
	case "jpg":
		return InitializeRenderJobResponseTargetJpg, nil
	}
	var t InitializeRenderJobResponseTarget
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InitializeRenderJobResponseTarget) Ptr() *InitializeRenderJobResponseTarget {
	return &i
}

// Format options for the rendered document
type StartImmediateRenderRequestFormatOpts struct {
	FromPage *float64                                     `json:"fromPage,omitempty" url:"fromPage,omitempty"`
	ToPage   *float64                                     `json:"toPage,omitempty" url:"toPage,omitempty"`
	Format   *StartImmediateRenderRequestFormatOptsFormat `json:"format,omitempty" url:"format,omitempty"`
	// Selector to wait for to know when the page is loaded and can be saved as pdf, png, etc.
	WaitForSelector *string `json:"waitForSelector,omitempty" url:"waitForSelector,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StartImmediateRenderRequestFormatOpts) GetFromPage() *float64 {
	if s == nil {
		return nil
	}
	return s.FromPage
}

func (s *StartImmediateRenderRequestFormatOpts) GetToPage() *float64 {
	if s == nil {
		return nil
	}
	return s.ToPage
}

func (s *StartImmediateRenderRequestFormatOpts) GetFormat() *StartImmediateRenderRequestFormatOptsFormat {
	if s == nil {
		return nil
	}
	return s.Format
}

func (s *StartImmediateRenderRequestFormatOpts) GetWaitForSelector() *string {
	if s == nil {
		return nil
	}
	return s.WaitForSelector
}

func (s *StartImmediateRenderRequestFormatOpts) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StartImmediateRenderRequestFormatOpts) UnmarshalJSON(data []byte) error {
	type unmarshaler StartImmediateRenderRequestFormatOpts
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StartImmediateRenderRequestFormatOpts(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StartImmediateRenderRequestFormatOpts) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StartImmediateRenderRequestFormatOptsFormat string

const (
	StartImmediateRenderRequestFormatOptsFormatLetter  StartImmediateRenderRequestFormatOptsFormat = "letter"
	StartImmediateRenderRequestFormatOptsFormatLegal   StartImmediateRenderRequestFormatOptsFormat = "legal"
	StartImmediateRenderRequestFormatOptsFormatTabloid StartImmediateRenderRequestFormatOptsFormat = "tabloid"
	StartImmediateRenderRequestFormatOptsFormatLedger  StartImmediateRenderRequestFormatOptsFormat = "ledger"
	StartImmediateRenderRequestFormatOptsFormatA0      StartImmediateRenderRequestFormatOptsFormat = "a0"
	StartImmediateRenderRequestFormatOptsFormatA1      StartImmediateRenderRequestFormatOptsFormat = "a1"
	StartImmediateRenderRequestFormatOptsFormatA2      StartImmediateRenderRequestFormatOptsFormat = "a2"
	StartImmediateRenderRequestFormatOptsFormatA3      StartImmediateRenderRequestFormatOptsFormat = "a3"
	StartImmediateRenderRequestFormatOptsFormatA4      StartImmediateRenderRequestFormatOptsFormat = "a4"
	StartImmediateRenderRequestFormatOptsFormatA5      StartImmediateRenderRequestFormatOptsFormat = "a5"
	StartImmediateRenderRequestFormatOptsFormatA6      StartImmediateRenderRequestFormatOptsFormat = "a6"
)

func NewStartImmediateRenderRequestFormatOptsFormatFromString(s string) (StartImmediateRenderRequestFormatOptsFormat, error) {
	switch s {
	case "letter":
		return StartImmediateRenderRequestFormatOptsFormatLetter, nil
	case "legal":
		return StartImmediateRenderRequestFormatOptsFormatLegal, nil
	case "tabloid":
		return StartImmediateRenderRequestFormatOptsFormatTabloid, nil
	case "ledger":
		return StartImmediateRenderRequestFormatOptsFormatLedger, nil
	case "a0":
		return StartImmediateRenderRequestFormatOptsFormatA0, nil
	case "a1":
		return StartImmediateRenderRequestFormatOptsFormatA1, nil
	case "a2":
		return StartImmediateRenderRequestFormatOptsFormatA2, nil
	case "a3":
		return StartImmediateRenderRequestFormatOptsFormatA3, nil
	case "a4":
		return StartImmediateRenderRequestFormatOptsFormatA4, nil
	case "a5":
		return StartImmediateRenderRequestFormatOptsFormatA5, nil
	case "a6":
		return StartImmediateRenderRequestFormatOptsFormatA6, nil
	}
	var t StartImmediateRenderRequestFormatOptsFormat
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s StartImmediateRenderRequestFormatOptsFormat) Ptr() *StartImmediateRenderRequestFormatOptsFormat {
	return &s
}

// Type of output to be rendered
type StartImmediateRenderRequestTarget string

const (
	StartImmediateRenderRequestTargetPdf  StartImmediateRenderRequestTarget = "pdf"
	StartImmediateRenderRequestTargetHtml StartImmediateRenderRequestTarget = "html"
	StartImmediateRenderRequestTargetDocx StartImmediateRenderRequestTarget = "docx"
	StartImmediateRenderRequestTargetXlsx StartImmediateRenderRequestTarget = "xlsx"
	StartImmediateRenderRequestTargetPptx StartImmediateRenderRequestTarget = "pptx"
	StartImmediateRenderRequestTargetPng  StartImmediateRenderRequestTarget = "png"
	StartImmediateRenderRequestTargetJpg  StartImmediateRenderRequestTarget = "jpg"
)

func NewStartImmediateRenderRequestTargetFromString(s string) (StartImmediateRenderRequestTarget, error) {
	switch s {
	case "pdf":
		return StartImmediateRenderRequestTargetPdf, nil
	case "html":
		return StartImmediateRenderRequestTargetHtml, nil
	case "docx":
		return StartImmediateRenderRequestTargetDocx, nil
	case "xlsx":
		return StartImmediateRenderRequestTargetXlsx, nil
	case "pptx":
		return StartImmediateRenderRequestTargetPptx, nil
	case "png":
		return StartImmediateRenderRequestTargetPng, nil
	case "jpg":
		return StartImmediateRenderRequestTargetJpg, nil
	}
	var t StartImmediateRenderRequestTarget
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s StartImmediateRenderRequestTarget) Ptr() *StartImmediateRenderRequestTarget {
	return &s
}

// Type of template to be rendered
type StartImmediateRenderRequestType string

const (
	StartImmediateRenderRequestTypeDocx  StartImmediateRenderRequestType = "docx"
	StartImmediateRenderRequestTypeXlsx  StartImmediateRenderRequestType = "xlsx"
	StartImmediateRenderRequestTypePptx  StartImmediateRenderRequestType = "pptx"
	StartImmediateRenderRequestTypeEjs   StartImmediateRenderRequestType = "ejs"
	StartImmediateRenderRequestTypeHtml  StartImmediateRenderRequestType = "html"
	StartImmediateRenderRequestTypeLatex StartImmediateRenderRequestType = "latex"
	StartImmediateRenderRequestTypeReact StartImmediateRenderRequestType = "react"
)

func NewStartImmediateRenderRequestTypeFromString(s string) (StartImmediateRenderRequestType, error) {
	switch s {
	case "docx":
		return StartImmediateRenderRequestTypeDocx, nil
	case "xlsx":
		return StartImmediateRenderRequestTypeXlsx, nil
	case "pptx":
		return StartImmediateRenderRequestTypePptx, nil
	case "ejs":
		return StartImmediateRenderRequestTypeEjs, nil
	case "html":
		return StartImmediateRenderRequestTypeHtml, nil
	case "latex":
		return StartImmediateRenderRequestTypeLatex, nil
	case "react":
		return StartImmediateRenderRequestTypeReact, nil
	}
	var t StartImmediateRenderRequestType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s StartImmediateRenderRequestType) Ptr() *StartImmediateRenderRequestType {
	return &s
}

type StartImmediateRenderResponse struct {
	// URL of the rendered output
	Url string `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StartImmediateRenderResponse) GetUrl() string {
	if s == nil {
		return ""
	}
	return s.Url
}

func (s *StartImmediateRenderResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StartImmediateRenderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler StartImmediateRenderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StartImmediateRenderResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StartImmediateRenderResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StartRenderJobResponse struct {
	// ID of the render job
	JobId string `json:"jobId" url:"jobId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StartRenderJobResponse) GetJobId() string {
	if s == nil {
		return ""
	}
	return s.JobId
}

func (s *StartRenderJobResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StartRenderJobResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler StartRenderJobResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StartRenderJobResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StartRenderJobResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
