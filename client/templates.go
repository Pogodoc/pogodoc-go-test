// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Pogodoc/pogodoc-go-test/client/internal"
)

type GenerateTemplatePreviewsRequest struct {
	// Type of template to be rendered
	Type GenerateTemplatePreviewsRequestType `json:"type" url:"-"`
	// Sample data for the template
	Data map[string]interface{} `json:"data,omitempty" url:"-"`
	// Format options for the rendered document
	FormatOpts *GenerateTemplatePreviewsRequestFormatOpts `json:"formatOpts,omitempty" url:"-"`
}

type SaveCreatedTemplateRequest struct {
	TemplateInfo *SaveCreatedTemplateRequestTemplateInfo `json:"templateInfo,omitempty" url:"-"`
	PreviewIds   *SaveCreatedTemplateRequestPreviewIds   `json:"previewIds,omitempty" url:"-"`
}

type CloneTemplateResponse struct {
	// ID of the new template
	NewTemplateId string `json:"newTemplateId" url:"newTemplateId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CloneTemplateResponse) GetNewTemplateId() string {
	if c == nil {
		return ""
	}
	return c.NewTemplateId
}

func (c *CloneTemplateResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CloneTemplateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CloneTemplateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CloneTemplateResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CloneTemplateResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteTemplateResponse struct {
	TemplateId string `json:"templateId" url:"templateId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteTemplateResponse) GetTemplateId() string {
	if d == nil {
		return ""
	}
	return d.TemplateId
}

func (d *DeleteTemplateResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteTemplateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteTemplateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteTemplateResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteTemplateResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GeneratePresignedGetUrlResponse struct {
	// Presigned URL to get the template
	PresignedUrl string `json:"presignedUrl" url:"presignedUrl"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GeneratePresignedGetUrlResponse) GetPresignedUrl() string {
	if g == nil {
		return ""
	}
	return g.PresignedUrl
}

func (g *GeneratePresignedGetUrlResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GeneratePresignedGetUrlResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GeneratePresignedGetUrlResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GeneratePresignedGetUrlResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GeneratePresignedGetUrlResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Format options for the rendered document
type GenerateTemplatePreviewsRequestFormatOpts struct {
	FromPage *float64                                         `json:"fromPage,omitempty" url:"fromPage,omitempty"`
	ToPage   *float64                                         `json:"toPage,omitempty" url:"toPage,omitempty"`
	Format   *GenerateTemplatePreviewsRequestFormatOptsFormat `json:"format,omitempty" url:"format,omitempty"`
	// Selector to wait for to know when the page is loaded and can be saved as pdf, png, etc.
	WaitForSelector *string `json:"waitForSelector,omitempty" url:"waitForSelector,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GenerateTemplatePreviewsRequestFormatOpts) GetFromPage() *float64 {
	if g == nil {
		return nil
	}
	return g.FromPage
}

func (g *GenerateTemplatePreviewsRequestFormatOpts) GetToPage() *float64 {
	if g == nil {
		return nil
	}
	return g.ToPage
}

func (g *GenerateTemplatePreviewsRequestFormatOpts) GetFormat() *GenerateTemplatePreviewsRequestFormatOptsFormat {
	if g == nil {
		return nil
	}
	return g.Format
}

func (g *GenerateTemplatePreviewsRequestFormatOpts) GetWaitForSelector() *string {
	if g == nil {
		return nil
	}
	return g.WaitForSelector
}

func (g *GenerateTemplatePreviewsRequestFormatOpts) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateTemplatePreviewsRequestFormatOpts) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateTemplatePreviewsRequestFormatOpts
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateTemplatePreviewsRequestFormatOpts(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateTemplatePreviewsRequestFormatOpts) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateTemplatePreviewsRequestFormatOptsFormat string

const (
	GenerateTemplatePreviewsRequestFormatOptsFormatLetter  GenerateTemplatePreviewsRequestFormatOptsFormat = "letter"
	GenerateTemplatePreviewsRequestFormatOptsFormatLegal   GenerateTemplatePreviewsRequestFormatOptsFormat = "legal"
	GenerateTemplatePreviewsRequestFormatOptsFormatTabloid GenerateTemplatePreviewsRequestFormatOptsFormat = "tabloid"
	GenerateTemplatePreviewsRequestFormatOptsFormatLedger  GenerateTemplatePreviewsRequestFormatOptsFormat = "ledger"
	GenerateTemplatePreviewsRequestFormatOptsFormatA0      GenerateTemplatePreviewsRequestFormatOptsFormat = "a0"
	GenerateTemplatePreviewsRequestFormatOptsFormatA1      GenerateTemplatePreviewsRequestFormatOptsFormat = "a1"
	GenerateTemplatePreviewsRequestFormatOptsFormatA2      GenerateTemplatePreviewsRequestFormatOptsFormat = "a2"
	GenerateTemplatePreviewsRequestFormatOptsFormatA3      GenerateTemplatePreviewsRequestFormatOptsFormat = "a3"
	GenerateTemplatePreviewsRequestFormatOptsFormatA4      GenerateTemplatePreviewsRequestFormatOptsFormat = "a4"
	GenerateTemplatePreviewsRequestFormatOptsFormatA5      GenerateTemplatePreviewsRequestFormatOptsFormat = "a5"
	GenerateTemplatePreviewsRequestFormatOptsFormatA6      GenerateTemplatePreviewsRequestFormatOptsFormat = "a6"
)

func NewGenerateTemplatePreviewsRequestFormatOptsFormatFromString(s string) (GenerateTemplatePreviewsRequestFormatOptsFormat, error) {
	switch s {
	case "letter":
		return GenerateTemplatePreviewsRequestFormatOptsFormatLetter, nil
	case "legal":
		return GenerateTemplatePreviewsRequestFormatOptsFormatLegal, nil
	case "tabloid":
		return GenerateTemplatePreviewsRequestFormatOptsFormatTabloid, nil
	case "ledger":
		return GenerateTemplatePreviewsRequestFormatOptsFormatLedger, nil
	case "a0":
		return GenerateTemplatePreviewsRequestFormatOptsFormatA0, nil
	case "a1":
		return GenerateTemplatePreviewsRequestFormatOptsFormatA1, nil
	case "a2":
		return GenerateTemplatePreviewsRequestFormatOptsFormatA2, nil
	case "a3":
		return GenerateTemplatePreviewsRequestFormatOptsFormatA3, nil
	case "a4":
		return GenerateTemplatePreviewsRequestFormatOptsFormatA4, nil
	case "a5":
		return GenerateTemplatePreviewsRequestFormatOptsFormatA5, nil
	case "a6":
		return GenerateTemplatePreviewsRequestFormatOptsFormatA6, nil
	}
	var t GenerateTemplatePreviewsRequestFormatOptsFormat
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GenerateTemplatePreviewsRequestFormatOptsFormat) Ptr() *GenerateTemplatePreviewsRequestFormatOptsFormat {
	return &g
}

// Type of template to be rendered
type GenerateTemplatePreviewsRequestType string

const (
	GenerateTemplatePreviewsRequestTypeDocx  GenerateTemplatePreviewsRequestType = "docx"
	GenerateTemplatePreviewsRequestTypeXlsx  GenerateTemplatePreviewsRequestType = "xlsx"
	GenerateTemplatePreviewsRequestTypePptx  GenerateTemplatePreviewsRequestType = "pptx"
	GenerateTemplatePreviewsRequestTypeEjs   GenerateTemplatePreviewsRequestType = "ejs"
	GenerateTemplatePreviewsRequestTypeHtml  GenerateTemplatePreviewsRequestType = "html"
	GenerateTemplatePreviewsRequestTypeLatex GenerateTemplatePreviewsRequestType = "latex"
	GenerateTemplatePreviewsRequestTypeReact GenerateTemplatePreviewsRequestType = "react"
)

func NewGenerateTemplatePreviewsRequestTypeFromString(s string) (GenerateTemplatePreviewsRequestType, error) {
	switch s {
	case "docx":
		return GenerateTemplatePreviewsRequestTypeDocx, nil
	case "xlsx":
		return GenerateTemplatePreviewsRequestTypeXlsx, nil
	case "pptx":
		return GenerateTemplatePreviewsRequestTypePptx, nil
	case "ejs":
		return GenerateTemplatePreviewsRequestTypeEjs, nil
	case "html":
		return GenerateTemplatePreviewsRequestTypeHtml, nil
	case "latex":
		return GenerateTemplatePreviewsRequestTypeLatex, nil
	case "react":
		return GenerateTemplatePreviewsRequestTypeReact, nil
	}
	var t GenerateTemplatePreviewsRequestType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GenerateTemplatePreviewsRequestType) Ptr() *GenerateTemplatePreviewsRequestType {
	return &g
}

type GenerateTemplatePreviewsResponse struct {
	PngPreview *GenerateTemplatePreviewsResponsePngPreview `json:"pngPreview,omitempty" url:"pngPreview,omitempty"`
	PdfPreview *GenerateTemplatePreviewsResponsePdfPreview `json:"pdfPreview,omitempty" url:"pdfPreview,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GenerateTemplatePreviewsResponse) GetPngPreview() *GenerateTemplatePreviewsResponsePngPreview {
	if g == nil {
		return nil
	}
	return g.PngPreview
}

func (g *GenerateTemplatePreviewsResponse) GetPdfPreview() *GenerateTemplatePreviewsResponsePdfPreview {
	if g == nil {
		return nil
	}
	return g.PdfPreview
}

func (g *GenerateTemplatePreviewsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateTemplatePreviewsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateTemplatePreviewsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateTemplatePreviewsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateTemplatePreviewsResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateTemplatePreviewsResponsePdfPreview struct {
	// URL of the rendered preview
	Url string `json:"url" url:"url"`
	// ID of the render job
	JobId string `json:"jobId" url:"jobId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GenerateTemplatePreviewsResponsePdfPreview) GetUrl() string {
	if g == nil {
		return ""
	}
	return g.Url
}

func (g *GenerateTemplatePreviewsResponsePdfPreview) GetJobId() string {
	if g == nil {
		return ""
	}
	return g.JobId
}

func (g *GenerateTemplatePreviewsResponsePdfPreview) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateTemplatePreviewsResponsePdfPreview) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateTemplatePreviewsResponsePdfPreview
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateTemplatePreviewsResponsePdfPreview(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateTemplatePreviewsResponsePdfPreview) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateTemplatePreviewsResponsePngPreview struct {
	// URL of the rendered preview
	Url string `json:"url" url:"url"`
	// ID of the render job
	JobId string `json:"jobId" url:"jobId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GenerateTemplatePreviewsResponsePngPreview) GetUrl() string {
	if g == nil {
		return ""
	}
	return g.Url
}

func (g *GenerateTemplatePreviewsResponsePngPreview) GetJobId() string {
	if g == nil {
		return ""
	}
	return g.JobId
}

func (g *GenerateTemplatePreviewsResponsePngPreview) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateTemplatePreviewsResponsePngPreview) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateTemplatePreviewsResponsePngPreview
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateTemplatePreviewsResponsePngPreview(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateTemplatePreviewsResponsePngPreview) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetTemplateIndexHtmlResponse struct {
	// Index.html file of the template
	IndexHtml string `json:"indexHtml" url:"indexHtml"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetTemplateIndexHtmlResponse) GetIndexHtml() string {
	if g == nil {
		return ""
	}
	return g.IndexHtml
}

func (g *GetTemplateIndexHtmlResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetTemplateIndexHtmlResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetTemplateIndexHtmlResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetTemplateIndexHtmlResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetTemplateIndexHtmlResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type InitializeTemplateCreationResponse struct {
	// ID of the template
	TemplateId string `json:"templateId" url:"templateId"`
	// Presigned URL to upload the template to S3
	PresignedTemplateUploadUrl string `json:"presignedTemplateUploadUrl" url:"presignedTemplateUploadUrl"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InitializeTemplateCreationResponse) GetTemplateId() string {
	if i == nil {
		return ""
	}
	return i.TemplateId
}

func (i *InitializeTemplateCreationResponse) GetPresignedTemplateUploadUrl() string {
	if i == nil {
		return ""
	}
	return i.PresignedTemplateUploadUrl
}

func (i *InitializeTemplateCreationResponse) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InitializeTemplateCreationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler InitializeTemplateCreationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InitializeTemplateCreationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitializeTemplateCreationResponse) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type SaveCreatedTemplateRequestPreviewIds struct {
	// ID of the job for the PNG preview
	PngJobId string `json:"pngJobId" url:"pngJobId"`
	// ID of the job for the PDF preview
	PdfJobId string `json:"pdfJobId" url:"pdfJobId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SaveCreatedTemplateRequestPreviewIds) GetPngJobId() string {
	if s == nil {
		return ""
	}
	return s.PngJobId
}

func (s *SaveCreatedTemplateRequestPreviewIds) GetPdfJobId() string {
	if s == nil {
		return ""
	}
	return s.PdfJobId
}

func (s *SaveCreatedTemplateRequestPreviewIds) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SaveCreatedTemplateRequestPreviewIds) UnmarshalJSON(data []byte) error {
	type unmarshaler SaveCreatedTemplateRequestPreviewIds
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SaveCreatedTemplateRequestPreviewIds(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SaveCreatedTemplateRequestPreviewIds) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SaveCreatedTemplateRequestTemplateInfo struct {
	// Title of the template
	Title string `json:"title" url:"title"`
	// Description of the template
	Description string `json:"description" url:"description"`
	// Type of template to be rendered
	Type SaveCreatedTemplateRequestTemplateInfoType `json:"type" url:"type"`
	// Sample data for the template
	SampleData map[string]interface{} `json:"sampleData,omitempty" url:"sampleData,omitempty"`
	SourceCode *string                `json:"sourceCode,omitempty" url:"sourceCode,omitempty"`
	// Categories of the template
	Categories []SaveCreatedTemplateRequestTemplateInfoCategoriesItem `json:"categories,omitempty" url:"categories,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SaveCreatedTemplateRequestTemplateInfo) GetTitle() string {
	if s == nil {
		return ""
	}
	return s.Title
}

func (s *SaveCreatedTemplateRequestTemplateInfo) GetDescription() string {
	if s == nil {
		return ""
	}
	return s.Description
}

func (s *SaveCreatedTemplateRequestTemplateInfo) GetType() SaveCreatedTemplateRequestTemplateInfoType {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *SaveCreatedTemplateRequestTemplateInfo) GetSampleData() map[string]interface{} {
	if s == nil {
		return nil
	}
	return s.SampleData
}

func (s *SaveCreatedTemplateRequestTemplateInfo) GetSourceCode() *string {
	if s == nil {
		return nil
	}
	return s.SourceCode
}

func (s *SaveCreatedTemplateRequestTemplateInfo) GetCategories() []SaveCreatedTemplateRequestTemplateInfoCategoriesItem {
	if s == nil {
		return nil
	}
	return s.Categories
}

func (s *SaveCreatedTemplateRequestTemplateInfo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SaveCreatedTemplateRequestTemplateInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler SaveCreatedTemplateRequestTemplateInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SaveCreatedTemplateRequestTemplateInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SaveCreatedTemplateRequestTemplateInfo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SaveCreatedTemplateRequestTemplateInfoCategoriesItem string

const (
	SaveCreatedTemplateRequestTemplateInfoCategoriesItemInvoice SaveCreatedTemplateRequestTemplateInfoCategoriesItem = "invoice"
	SaveCreatedTemplateRequestTemplateInfoCategoriesItemMail    SaveCreatedTemplateRequestTemplateInfoCategoriesItem = "mail"
	SaveCreatedTemplateRequestTemplateInfoCategoriesItemReport  SaveCreatedTemplateRequestTemplateInfoCategoriesItem = "report"
	SaveCreatedTemplateRequestTemplateInfoCategoriesItemCv      SaveCreatedTemplateRequestTemplateInfoCategoriesItem = "cv"
	SaveCreatedTemplateRequestTemplateInfoCategoriesItemOther   SaveCreatedTemplateRequestTemplateInfoCategoriesItem = "other"
)

func NewSaveCreatedTemplateRequestTemplateInfoCategoriesItemFromString(s string) (SaveCreatedTemplateRequestTemplateInfoCategoriesItem, error) {
	switch s {
	case "invoice":
		return SaveCreatedTemplateRequestTemplateInfoCategoriesItemInvoice, nil
	case "mail":
		return SaveCreatedTemplateRequestTemplateInfoCategoriesItemMail, nil
	case "report":
		return SaveCreatedTemplateRequestTemplateInfoCategoriesItemReport, nil
	case "cv":
		return SaveCreatedTemplateRequestTemplateInfoCategoriesItemCv, nil
	case "other":
		return SaveCreatedTemplateRequestTemplateInfoCategoriesItemOther, nil
	}
	var t SaveCreatedTemplateRequestTemplateInfoCategoriesItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SaveCreatedTemplateRequestTemplateInfoCategoriesItem) Ptr() *SaveCreatedTemplateRequestTemplateInfoCategoriesItem {
	return &s
}

// Type of template to be rendered
type SaveCreatedTemplateRequestTemplateInfoType string

const (
	SaveCreatedTemplateRequestTemplateInfoTypeDocx  SaveCreatedTemplateRequestTemplateInfoType = "docx"
	SaveCreatedTemplateRequestTemplateInfoTypeXlsx  SaveCreatedTemplateRequestTemplateInfoType = "xlsx"
	SaveCreatedTemplateRequestTemplateInfoTypePptx  SaveCreatedTemplateRequestTemplateInfoType = "pptx"
	SaveCreatedTemplateRequestTemplateInfoTypeEjs   SaveCreatedTemplateRequestTemplateInfoType = "ejs"
	SaveCreatedTemplateRequestTemplateInfoTypeHtml  SaveCreatedTemplateRequestTemplateInfoType = "html"
	SaveCreatedTemplateRequestTemplateInfoTypeLatex SaveCreatedTemplateRequestTemplateInfoType = "latex"
	SaveCreatedTemplateRequestTemplateInfoTypeReact SaveCreatedTemplateRequestTemplateInfoType = "react"
)

func NewSaveCreatedTemplateRequestTemplateInfoTypeFromString(s string) (SaveCreatedTemplateRequestTemplateInfoType, error) {
	switch s {
	case "docx":
		return SaveCreatedTemplateRequestTemplateInfoTypeDocx, nil
	case "xlsx":
		return SaveCreatedTemplateRequestTemplateInfoTypeXlsx, nil
	case "pptx":
		return SaveCreatedTemplateRequestTemplateInfoTypePptx, nil
	case "ejs":
		return SaveCreatedTemplateRequestTemplateInfoTypeEjs, nil
	case "html":
		return SaveCreatedTemplateRequestTemplateInfoTypeHtml, nil
	case "latex":
		return SaveCreatedTemplateRequestTemplateInfoTypeLatex, nil
	case "react":
		return SaveCreatedTemplateRequestTemplateInfoTypeReact, nil
	}
	var t SaveCreatedTemplateRequestTemplateInfoType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SaveCreatedTemplateRequestTemplateInfoType) Ptr() *SaveCreatedTemplateRequestTemplateInfoType {
	return &s
}

type UpdateTemplateRequestPreviewIds struct {
	// ID of the job for the PNG preview
	PngJobId string `json:"pngJobId" url:"pngJobId"`
	// ID of the job for the PDF preview
	PdfJobId string `json:"pdfJobId" url:"pdfJobId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateTemplateRequestPreviewIds) GetPngJobId() string {
	if u == nil {
		return ""
	}
	return u.PngJobId
}

func (u *UpdateTemplateRequestPreviewIds) GetPdfJobId() string {
	if u == nil {
		return ""
	}
	return u.PdfJobId
}

func (u *UpdateTemplateRequestPreviewIds) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateTemplateRequestPreviewIds) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateTemplateRequestPreviewIds
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateTemplateRequestPreviewIds(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateTemplateRequestPreviewIds) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateTemplateRequestTemplateInfo struct {
	// Title of the template
	Title string `json:"title" url:"title"`
	// Description of the template
	Description string `json:"description" url:"description"`
	// Type of template to be rendered
	Type UpdateTemplateRequestTemplateInfoType `json:"type" url:"type"`
	// Sample data for the template
	SampleData map[string]interface{} `json:"sampleData,omitempty" url:"sampleData,omitempty"`
	SourceCode *string                `json:"sourceCode,omitempty" url:"sourceCode,omitempty"`
	// Categories of the template
	Categories []UpdateTemplateRequestTemplateInfoCategoriesItem `json:"categories,omitempty" url:"categories,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateTemplateRequestTemplateInfo) GetTitle() string {
	if u == nil {
		return ""
	}
	return u.Title
}

func (u *UpdateTemplateRequestTemplateInfo) GetDescription() string {
	if u == nil {
		return ""
	}
	return u.Description
}

func (u *UpdateTemplateRequestTemplateInfo) GetType() UpdateTemplateRequestTemplateInfoType {
	if u == nil {
		return ""
	}
	return u.Type
}

func (u *UpdateTemplateRequestTemplateInfo) GetSampleData() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.SampleData
}

func (u *UpdateTemplateRequestTemplateInfo) GetSourceCode() *string {
	if u == nil {
		return nil
	}
	return u.SourceCode
}

func (u *UpdateTemplateRequestTemplateInfo) GetCategories() []UpdateTemplateRequestTemplateInfoCategoriesItem {
	if u == nil {
		return nil
	}
	return u.Categories
}

func (u *UpdateTemplateRequestTemplateInfo) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateTemplateRequestTemplateInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateTemplateRequestTemplateInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateTemplateRequestTemplateInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateTemplateRequestTemplateInfo) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateTemplateRequestTemplateInfoCategoriesItem string

const (
	UpdateTemplateRequestTemplateInfoCategoriesItemInvoice UpdateTemplateRequestTemplateInfoCategoriesItem = "invoice"
	UpdateTemplateRequestTemplateInfoCategoriesItemMail    UpdateTemplateRequestTemplateInfoCategoriesItem = "mail"
	UpdateTemplateRequestTemplateInfoCategoriesItemReport  UpdateTemplateRequestTemplateInfoCategoriesItem = "report"
	UpdateTemplateRequestTemplateInfoCategoriesItemCv      UpdateTemplateRequestTemplateInfoCategoriesItem = "cv"
	UpdateTemplateRequestTemplateInfoCategoriesItemOther   UpdateTemplateRequestTemplateInfoCategoriesItem = "other"
)

func NewUpdateTemplateRequestTemplateInfoCategoriesItemFromString(s string) (UpdateTemplateRequestTemplateInfoCategoriesItem, error) {
	switch s {
	case "invoice":
		return UpdateTemplateRequestTemplateInfoCategoriesItemInvoice, nil
	case "mail":
		return UpdateTemplateRequestTemplateInfoCategoriesItemMail, nil
	case "report":
		return UpdateTemplateRequestTemplateInfoCategoriesItemReport, nil
	case "cv":
		return UpdateTemplateRequestTemplateInfoCategoriesItemCv, nil
	case "other":
		return UpdateTemplateRequestTemplateInfoCategoriesItemOther, nil
	}
	var t UpdateTemplateRequestTemplateInfoCategoriesItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateTemplateRequestTemplateInfoCategoriesItem) Ptr() *UpdateTemplateRequestTemplateInfoCategoriesItem {
	return &u
}

// Type of template to be rendered
type UpdateTemplateRequestTemplateInfoType string

const (
	UpdateTemplateRequestTemplateInfoTypeDocx  UpdateTemplateRequestTemplateInfoType = "docx"
	UpdateTemplateRequestTemplateInfoTypeXlsx  UpdateTemplateRequestTemplateInfoType = "xlsx"
	UpdateTemplateRequestTemplateInfoTypePptx  UpdateTemplateRequestTemplateInfoType = "pptx"
	UpdateTemplateRequestTemplateInfoTypeEjs   UpdateTemplateRequestTemplateInfoType = "ejs"
	UpdateTemplateRequestTemplateInfoTypeHtml  UpdateTemplateRequestTemplateInfoType = "html"
	UpdateTemplateRequestTemplateInfoTypeLatex UpdateTemplateRequestTemplateInfoType = "latex"
	UpdateTemplateRequestTemplateInfoTypeReact UpdateTemplateRequestTemplateInfoType = "react"
)

func NewUpdateTemplateRequestTemplateInfoTypeFromString(s string) (UpdateTemplateRequestTemplateInfoType, error) {
	switch s {
	case "docx":
		return UpdateTemplateRequestTemplateInfoTypeDocx, nil
	case "xlsx":
		return UpdateTemplateRequestTemplateInfoTypeXlsx, nil
	case "pptx":
		return UpdateTemplateRequestTemplateInfoTypePptx, nil
	case "ejs":
		return UpdateTemplateRequestTemplateInfoTypeEjs, nil
	case "html":
		return UpdateTemplateRequestTemplateInfoTypeHtml, nil
	case "latex":
		return UpdateTemplateRequestTemplateInfoTypeLatex, nil
	case "react":
		return UpdateTemplateRequestTemplateInfoTypeReact, nil
	}
	var t UpdateTemplateRequestTemplateInfoType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateTemplateRequestTemplateInfoType) Ptr() *UpdateTemplateRequestTemplateInfoType {
	return &u
}

type UpdateTemplateResponse struct {
	NewContentId string `json:"newContentId" url:"newContentId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateTemplateResponse) GetNewContentId() string {
	if u == nil {
		return ""
	}
	return u.NewContentId
}

func (u *UpdateTemplateResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateTemplateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateTemplateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateTemplateResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateTemplateResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateTemplateRequest struct {
	TemplateInfo *UpdateTemplateRequestTemplateInfo `json:"templateInfo,omitempty" url:"-"`
	PreviewIds   *UpdateTemplateRequestPreviewIds   `json:"previewIds,omitempty" url:"-"`
	// ID by which the new template content is saved
	ContentId string `json:"contentId" url:"-"`
}

type UploadTemplateIndexHtmlRequest struct {
	// New index.html file of the template
	IndexHtml string `json:"indexHtml" url:"-"`
}
